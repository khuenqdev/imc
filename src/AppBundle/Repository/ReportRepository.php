<?php

namespace AppBundle\Repository;
use Doctrine\ORM\NonUniqueResultException;
use Doctrine\ORM\NoResultException;

/**
 * ReportRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ReportRepository extends \Doctrine\ORM\EntityRepository
{
    /**
     * Get average execution time
     * @deprecated Deprecated since building average query for a subset of data is hard with QueryBuilder
     * @return int|mixed
     */
    public function getAverageExecutionTime()
    {
        $qb = $this->createQueryBuilder('r');

        $qb->select("AVG(r.executionTime) AS average_execution_time");

        try {
            $result = $qb->getQuery()->getSingleScalarResult();
        } catch (NoResultException $e) {
            $result = 0;
        } catch (NonUniqueResultException $e) {
            $result = 0;
        }

        return $result;
    }

    /**
     * Get the last {limit} execution times of crawling task
     *
     * @param null $limit
     * @return array
     */
    public function getReport($limit = null)
    {
        $qb = $this->createQueryBuilder('r');

        $qb->select('r.id')
            ->addSelect('r.startAt')
            ->addSelect('r.endAt')
            ->addSelect('r.executionTime')
            ->addSelect('r.memoryUsage')
            ->addSelect('r.noOfLinks')
            ->addSelect('r.noOfVisitedLinks')
            ->addSelect('r.noOfImages')
            ->addSelect('r.noOfExifImages');
        $qb->orderBy('r.startAt', 'DESC');

        if (!is_null($limit)) {
            $qb->setFirstResult(0)
                ->setMaxResults($limit);
        }

        return $qb->getQuery()->getResult();
    }
}
