{% extends '@Gui/base.html.twig' %}
{% set active_menu = 'stats' %}
{% block title %}General Statistics{% endblock %}

{% block content %}
    <div class="row">
        <div class="col s12 m6">
            <div class="statistics">
                <h5>General Statistics</h5>
                <div class="row">
                    <div class="col s9">
                        <b>Discovered links</b>
                    </div>
                    <div class="col s3">{{ no_of_links }}</div>
                </div>
                <div class="row">
                    <div class="col s9">
                        <b>Visited links</b>
                    </div>
                    <div class="col s3">
                        {{ visited_links }} ({{ ((visited_links / no_of_links) * 100)|number_format(2, '.', ',') }}%)
                    </div>
                </div>
                <div class="row">
                    <div class="col s9">
                        <b>Discovered images</b>
                    </div>
                    <div class="col s3">{{ discovered_images }}</div>
                </div>
                <div class="row yellow">
                    <div class="col s9">
                        <b>Images w/ Location in metadata</b>
                    </div>
                    <div class="col s3">
                        {{ images_with_exif_location }}
                        ({{ ((images_with_exif_location / discovered_images) * 100)|number_format(2, '.', ',') }}%)
                    </div>
                </div>
                <div class="row">
                    <div class="col s9">
                        <b>Images w/o Location in metadata</b>
                    </div>
                    <div class="col s3">
                        {{ images_without_exif_location }}
                        ({{ ((images_without_exif_location / discovered_images) * 100)|number_format(2, '.', ',') }}%)
                    </div>
                </div>
                <div class="row red lighten-3">
                    <div class="col s9">
                        <b>Images w/ Wrong Location Coordinates by GPS Sensor</b>
                    </div>
                    <div class="col s3">
                        {{ images_with_gps_sensor_errors }}
                        ({{ ((images_with_gps_sensor_errors / discovered_images) * 100)|number_format(2, '.', ',') }}%)
                    </div>
                </div>
                <div class="row">
                    <div class="col s9">
                        <b>Average image size</b>
                    </div>
                    <div class="col s3">{{ average_image_size.average_width|round ~ ' x ' ~ average_image_size.average_height|round }}
                        px
                    </div>
                </div>
            </div>
        </div>
        <div class="col s12 m6">
            <div class="statistics">
                <h5>Domain Statistics</h5>
                <table class="highlight striped">
                    <thead>
                    <tr>
                        <th>Domain</th>
                        <th>Images</th>
                    </tr>
                    </thead>
                    <tbody>
                    {% for data in domain_images %}
                        <tr>
                            <td><b>.{{ data.domain }}</b></td>
                            <td>{{ data.no_of_images }}</td>
                        </tr>
                    {% endfor %}
                    </tbody>
                </table>
            </div>
        </div>
    </div>

    <div class="row">
        <div class="col s12 m6">
            <div class="statistics">
                <h5>Execution times of previous crawling tasks</h5>
                <div id="execution_times_chart"></div>
            </div>
        </div>
        <div class="col s12 m6">
            <div class="statistics">
                <h5>Handling of crawling results</h5>
                <div id="result_handling_chart"></div>
            </div>
        </div>
    </div>

{% endblock %}

{% block scripts %}
    <script type="text/javascript">
        // Load the Visualization API and the corechart package.
        google.charts.load('current', {'packages': ['corechart']});

        // Set a callback to run when the Google Visualization API is loaded.
        google.charts.setOnLoadCallback(drawChart);

        // Callback that creates and populates a data table,
        // instantiates the pie chart, passes in the data and
        // draws it.
        function drawChart() {
            drawExecutionTimeChart();
            drawResultHandlingChart();
        }

        function drawExecutionTimeChart() {
            var data = google.visualization.arrayToDataTable([
                ['Date', 'Average', 'Execution Times'],
                {% for time in execution_times %}
                ['{{ time.startAt }}', {{ average_execution_time }}, {{ time.executionTime }}],
                {% endfor %}
            ]);

            var options = {
                curveType: 'function',
                legend: {position: 'bottom'},
                width: 600,
                height: 350
            };

            var chart = new google.visualization.LineChart(document.getElementById('execution_times_chart'));

            chart.draw(data, options);
        }

        function drawResultHandlingChart() {
            // Create the data table.
            var data = new google.visualization.DataTable();
            data.addColumn('string', 'Title');
            data.addColumn('number', 'Statistic');
            data.addRows([
                ['Geocoded', {{ images_with_exif_location }}],
                ['Successful geoparsed', {{ successful_geoparsed_images }}],
                ['Unsuccessful geoparsed', {{ unsuccessful_geoparsed_images }}],
                ['Unhandled', {{ images_without_exif_location - (successful_geoparsed_images + unsuccessful_geoparsed_images) }}]
            ]);

            // Set chart options
            var options = {
                width: 600,
                height: 350
            };

            // Instantiate and draw our chart, passing in some options.
            var chart = new google.visualization.PieChart(document.getElementById('result_handling_chart'));
            chart.draw(data, options);
        }
    </script>
{% endblock %}

{% block footer %}
{% endblock %}